/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import Database.dbConnection;
import java.sql.Statement;
import java.sql.Connection;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.table.TableRowSorter;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.SQLException;

import Database.ProductAccess;
import Database.KeranjangAccess;
import Database.UserAccess;
import Database.CheckoutAccess;
import Database.WishListAccess;
import Model.Buku;
import Model.Elektronik;
import Model.Pakaian;
import Model.Product;
import Model.Keranjang;
import Model.User;
import Model.Checkout;
import Model.SessionManager;
import Model.WishList;


/**
 *
 * @author Afzaal isnaufal
 */
public class UI_ListProduct extends javax.swing.JFrame {
   

    private UI_ListProduct listProductForm;
    private static int loggedInUserId;
    

    /**
     * Creates new form UI_ListProduct
     */

    public UI_ListProduct(int loggedInUserId) {
        this.loggedInUserId = loggedInUserId;
        initComponents();
        loadDataFromDatabase(); 

    }
 
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        keranjang = new javax.swing.JButton();
        pencarian = new javax.swing.JTextField();
        todayMarket = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProduk = new javax.swing.JTable();
        addToWishlistButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableKeranjang = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        output_totalHarga = new javax.swing.JLabel();
        Checkout = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        totalBarang = new javax.swing.JLabel();
        labelTotalBarang = new java.awt.Label();
        labelTotalHarga = new java.awt.Label();
        hapusButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        checkoutTable = new javax.swing.JTable();
        totalHarga = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Checkout1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        labelAccountBalance = new java.awt.Label();
        labelTotalHargaCheckout = new java.awt.Label();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        labelTotalBarangCheckout = new java.awt.Label();
        tambahBalance = new javax.swing.JButton();
        logOutBtn = new javax.swing.JButton();
        hapusbtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableWishList = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        wKeranjang = new javax.swing.JButton();
        hapusWish = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        inputNamaProduk = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        inputHarga = new javax.swing.JTextField();
        jualBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        buku = new javax.swing.JRadioButton();
        pakaian = new javax.swing.JRadioButton();
        elektronik = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        desk = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputDesk = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane3.setBackground(new java.awt.Color(255, 153, 0));
        jTabbedPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane3MouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        keranjang.setBackground(new java.awt.Color(255, 153, 0));
        keranjang.setText("KERANJANG");
        keranjang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keranjangActionPerformed(evt);
            }
        });

        pencarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pencarianActionPerformed(evt);
            }
        });
        pencarian.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pencarianKeyReleased(evt);
            }
        });

        todayMarket.setBackground(new java.awt.Color(255, 255, 255));
        todayMarket.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        todayMarket.setForeground(new java.awt.Color(255, 255, 255));
        todayMarket.setText("Today Market");

        tableProduk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kategori", "Nama Produk", "Deskripsi", "Harga"
            }
        ));
        tableProduk.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tableProdukAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        tableProduk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProdukMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableProduk);

        addToWishlistButton.setBackground(new java.awt.Color(255, 153, 0));
        addToWishlistButton.setText("WishList");
        addToWishlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToWishlistButtonActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setText("LIHAT DETAIL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/final_logo.png"))); // NOI18N
        jLabel14.setText("jLabel14");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(pencarian, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(keranjang, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(190, 190, 190)
                            .addComponent(addToWishlistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(278, 278, 278))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(todayMarket)
                            .addGap(392, 392, 392))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(147, 147, 147)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(todayMarket)
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pencarian, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keranjang, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToWishlistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        jTabbedPane3.addTab("Market Today", jPanel1);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Keranjang Belanja");

        tableKeranjang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kategori", "Nama", "Deskripsi", "Harga"
            }
        ));
        tableKeranjang.setName("tableKeranjang"); // NOI18N
        jScrollPane4.setViewportView(tableKeranjang);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Total Harga : ");

        output_totalHarga.setFont(new java.awt.Font("Sitka Display", 1, 24)); // NOI18N

        Checkout.setBackground(new java.awt.Color(255, 153, 0));
        Checkout.setText("Checkout");
        Checkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckoutActionPerformed(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Total Barang :");

        labelTotalBarang.setForeground(new java.awt.Color(255, 255, 255));
        labelTotalBarang.setText("label1");

        labelTotalHarga.setForeground(new java.awt.Color(255, 255, 255));
        labelTotalHarga.setText("label1");

        hapusButton.setBackground(new java.awt.Color(255, 153, 0));
        hapusButton.setText("Hapus Barang");
        hapusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hapusButton)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(output_totalHarga)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel8))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(labelTotalBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(totalBarang))
                                    .addComponent(labelTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel7))
                .addContainerGap(400, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel7)
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(output_totalHarga))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(totalBarang)
                                .addGap(0, 0, 0)
                                .addComponent(labelTotalBarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(labelTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addComponent(Checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hapusButton)
                .addContainerGap(194, Short.MAX_VALUE))
        );

        labelTotalBarang.getAccessibleContext().setAccessibleName("labelTotalBarang");

        jTabbedPane3.addTab("Keranjang", jPanel4);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        checkoutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "kategori", "nama", "deskripsi", "harga"
            }
        ));
        checkoutTable.setName("tableKeranjang"); // NOI18N
        jScrollPane3.setViewportView(checkoutTable);
        checkoutTable.getAccessibleContext().setAccessibleName("checkoutTable");

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Checkout Belanja");

        Checkout1.setBackground(new java.awt.Color(255, 153, 0));
        Checkout1.setText("Checkout");
        Checkout1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Checkout1ActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Saldo:");

        labelAccountBalance.setBackground(new java.awt.Color(0, 0, 0));
        labelAccountBalance.setForeground(new java.awt.Color(255, 255, 255));
        labelAccountBalance.setText("label1");

        labelTotalHargaCheckout.setBackground(new java.awt.Color(0, 0, 0));
        labelTotalHargaCheckout.setForeground(new java.awt.Color(255, 255, 255));
        labelTotalHargaCheckout.setText("label1");

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Total Harga : ");

        jLabel13.setBackground(new java.awt.Color(0, 0, 0));
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Total Barang :");

        labelTotalBarangCheckout.setBackground(new java.awt.Color(0, 0, 0));
        labelTotalBarangCheckout.setForeground(new java.awt.Color(255, 255, 255));
        labelTotalBarangCheckout.setText("label1");

        tambahBalance.setBackground(new java.awt.Color(255, 153, 0));
        tambahBalance.setText("Top-up");
        tambahBalance.setActionCommand("+");
        tambahBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahBalanceActionPerformed(evt);
            }
        });

        logOutBtn.setBackground(new java.awt.Color(255, 153, 0));
        logOutBtn.setText("Log Out");
        logOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBtnActionPerformed(evt);
            }
        });

        hapusbtn.setBackground(new java.awt.Color(255, 153, 0));
        hapusbtn.setText("Hapus");
        hapusbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hapusbtn)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel12))
                                        .addGap(20, 20, 20)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelTotalBarangCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(labelTotalHargaCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(184, 184, 184)
                                        .addComponent(totalHarga))
                                    .addComponent(Checkout1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelAccountBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tambahBalance))))
                        .addContainerGap(273, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logOutBtn)
                        .addGap(27, 27, 27))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel9)
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(logOutBtn)
                        .addGap(98, 98, 98)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel12))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(labelTotalHargaCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelTotalBarangCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalHarga)
                        .addGap(18, 18, 18)
                        .addComponent(Checkout1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelAccountBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addComponent(tambahBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hapusbtn)
                .addContainerGap(327, Short.MAX_VALUE))
        );

        labelTotalBarangCheckout.getAccessibleContext().setAccessibleName("labelTotalBarangCheckout");

        jTabbedPane3.addTab("Checkout", jPanel2);

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));

        tableWishList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "kategori", "nama", "deskripsi", "harga"
            }
        ));
        jScrollPane5.setViewportView(tableWishList);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("My WishList");

        wKeranjang.setBackground(new java.awt.Color(255, 153, 0));
        wKeranjang.setText("Keranjang");
        wKeranjang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wKeranjangActionPerformed(evt);
            }
        });

        hapusWish.setBackground(new java.awt.Color(255, 153, 0));
        hapusWish.setText("hapus");
        hapusWish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusWishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(jLabel6))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGap(374, 374, 374)
                            .addComponent(wKeranjang, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hapusWish))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(314, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel6)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wKeranjang)
                    .addComponent(hapusWish))
                .addContainerGap(192, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("WishList", jPanel5);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Jual Produk Anda");

        inputNamaProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNamaProdukActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Harga :");

        inputHarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputHargaActionPerformed(evt);
            }
        });

        jualBtn.setBackground(new java.awt.Color(255, 153, 0));
        jualBtn.setText("Jual");
        jualBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jualBtnActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pilih Kategori:");

        buku.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(buku);
        buku.setForeground(new java.awt.Color(255, 255, 255));
        buku.setText("Buku");
        buku.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bukuMouseClicked(evt);
            }
        });
        buku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bukuActionPerformed(evt);
            }
        });

        pakaian.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(pakaian);
        pakaian.setForeground(new java.awt.Color(255, 255, 255));
        pakaian.setText("Pakaian");

        elektronik.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(elektronik);
        elektronik.setForeground(new java.awt.Color(255, 255, 255));
        elektronik.setText("Elektronik");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nama Produk :");

        desk.setForeground(new java.awt.Color(255, 255, 255));
        desk.setText("Deskripsi");

        inputDesk.setColumns(20);
        inputDesk.setRows(5);
        jScrollPane1.setViewportView(inputDesk);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(desk)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(642, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(inputNamaProduk, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4)
                        .addComponent(jLabel3)
                        .addComponent(elektronik)
                        .addComponent(pakaian)
                        .addComponent(buku)
                        .addComponent(jLabel2)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(inputHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(388, 388, 388)
                            .addComponent(jualBtn)))
                    .addContainerGap(630, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 410, Short.MAX_VALUE)
                .addComponent(desk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(108, 108, 108)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(buku)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pakaian)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(elektronik)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(inputNamaProduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(inputHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 250, Short.MAX_VALUE)
                    .addComponent(jualBtn)
                    .addGap(92, 92, 92)))
        );

        jTabbedPane3.addTab("Jual Produk", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputNamaProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNamaProdukActionPerformed

    }//GEN-LAST:event_inputNamaProdukActionPerformed

    private void inputHargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputHargaActionPerformed

    }//GEN-LAST:event_inputHargaActionPerformed

    private void jualBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jualBtnActionPerformed
        String namaProduk = inputNamaProduk.getText();
        String hargaText = inputHarga.getText();
        String deskripsi = inputDesk.getText();
        String category = null;

        if (buku.isSelected()) {
            category = "Buku";
        } else if (pakaian.isSelected()) {
            category = "Pakaian";
        } else if (elektronik.isSelected()) {
            category = "Elektronik";
        }

        if (namaProduk.isEmpty() || hargaText.isEmpty() || deskripsi.isEmpty() || category == null) {
            JOptionPane.showMessageDialog(this, "Pastikan untuk isi semua", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double harga;
        try {
            harga = Double.parseDouble(hargaText);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Harga harus berupa angka", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Connection connection = dbConnection.getConnection();
            if (connection == null) {
                JOptionPane.showMessageDialog(this, "Gagal terhubung ke database", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        
            ProductAccess productAccess = new ProductAccess(connection);
   
            switch (category) {
                case "Buku":
                    productAccess.addProduct(new Buku(0, namaProduk, harga, deskripsi));
                    break;
                case "Pakaian":
                    productAccess.addProduct(new Pakaian(0, namaProduk, harga, deskripsi));
                    break;
                case "Elektronik":
                    productAccess.addProduct(new Elektronik(0, namaProduk, harga, deskripsi));
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Kategori tidak valid", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            JOptionPane.showMessageDialog(this, "Produk berhasil di tambahkan.", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Clear input fields
            inputNamaProduk.setText("");
            inputHarga.setText("");
            inputDesk.setText("");
            buttonGroup1.clearSelection();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error menambahkan produk ke dalam database: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jualBtnActionPerformed

    private void bukuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bukuMouseClicked

    }//GEN-LAST:event_bukuMouseClicked

    private void bukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bukuActionPerformed
        // TODO add your handling code here:S
    }//GEN-LAST:event_bukuActionPerformed

    private void tableProdukAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tableProdukAncestorAdded
  
    }//GEN-LAST:event_tableProdukAncestorAdded

    private void pencarianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pencarianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pencarianActionPerformed

    private void pencarianKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pencarianKeyReleased
        DefaultTableModel obj = (DefaultTableModel) tableProduk.getModel();
        TableRowSorter<DefaultTableModel> obj1 = new TableRowSorter<>(obj);
        tableProduk.setRowSorter(obj1);
        obj1.setRowFilter(RowFilter.regexFilter(pencarian.getText()));
    }//GEN-LAST:event_pencarianKeyReleased

    private void tableProdukMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProdukMouseClicked
        //Nothing
    }//GEN-LAST:event_tableProdukMouseClicked

    private void keranjangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keranjangActionPerformed
        int selectedRow = tableProduk.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin ditambahkan ke keranjang.");
            return;
        }

        DefaultTableModel produkModel = (DefaultTableModel) tableProduk.getModel();

        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        String hargaStr = produkModel.getValueAt(selectedRow, 3).toString();
    
        double harga;
        try {
            harga = Double.parseDouble(hargaStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Harga tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }   
        try {
            int userId = loggedInUserId; 
            KeranjangAccess keranjangAccess = new KeranjangAccess(dbConnection.getConnection());
        
            switch (kategori) {
                case "Buku":
                    keranjangAccess.addItem(userId, new Buku(0, namaProduk, harga, deskripsi));
                    break;
                case "Pakaian":
                    keranjangAccess.addItem(userId, new Pakaian(0, namaProduk, harga, deskripsi));
                    break;
                case "Elektronik":
                    keranjangAccess.addItem(userId, new Elektronik(0, namaProduk, harga, deskripsi));
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Kategori produk tidak valid: " + kategori);
                    return;
        }
        
            JOptionPane.showMessageDialog(this, "Produk berhasil ditambahkan ke keranjang.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error saat menambahkan produk ke keranjang: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        }//GEN-LAST:event_keranjangActionPerformed

    private void jTabbedPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane3MouseClicked
        loadDataFromDatabase();
        loadKeranjangData();
        loadCheckoutData();
        loadWishListData();
    }//GEN-LAST:event_jTabbedPane3MouseClicked

    private void CheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckoutActionPerformed
        try {
            
            KeranjangAccess keranjangAccess = new KeranjangAccess(dbConnection.getConnection());
            List<Product> cartItems = keranjangAccess.getAllItems(loggedInUserId);
            
            CheckoutAccess checkoutAccess = new CheckoutAccess(dbConnection.getConnection());
         
            checkoutAccess.addCheckout(loggedInUserId, cartItems);
            
            for (Product item : cartItems) {
                keranjangAccess.removeItem(loggedInUserId,item.getId());
            }
        
            loadKeranjangData();
        
            JOptionPane.showMessageDialog(this, "Checkout successful!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Failed to perform checkout: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CheckoutActionPerformed

    private void hapusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusButtonActionPerformed
        int selectedRow = tableKeranjang.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin dihapus dari keranjang.");
            return;
        }
        DefaultTableModel produkModel = (DefaultTableModel) tableKeranjang.getModel();
    
        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        double harga = Double.parseDouble(produkModel.getValueAt(selectedRow, 3).toString());
    
        try {     
            KeranjangAccess keranjangAccess = new KeranjangAccess(dbConnection.getConnection());
            int itemId = keranjangAccess.getItemId(loggedInUserId, kategori, namaProduk, deskripsi, harga);       
            keranjangAccess.removeItem(loggedInUserId, itemId);
            
            produkModel.removeRow(selectedRow);
    
            JOptionPane.showMessageDialog(this, "Produk berhasil dihapus dari keranjang.");
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error saat menghapus produk dari keranjang: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        loadKeranjangData();
 
    }//GEN-LAST:event_hapusButtonActionPerformed

    private void Checkout1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Checkout1ActionPerformed
        try {         
            UserAccess userAccess = new UserAccess(dbConnection.getConnection());
            CheckoutAccess checkoutAccess = new CheckoutAccess(dbConnection.getConnection());
            
            List<Product> checkoutItems = checkoutAccess.getCheckoutItems(loggedInUserId);
            
            User loggedInUser = userAccess.getUser(loggedInUserId);
            Checkout checkout = new Checkout(loggedInUser, checkoutItems);
            
            double totalPrice = checkout.calculateTotalPrice();
            try{
                checkoutAccess.performCheckout(loggedInUser, totalPrice);
                for (Product item : checkoutItems) {
                    checkoutAccess.removeItem(loggedInUserId,item.getId());
                    
                    JOptionPane.showMessageDialog(this, "Checkout berhasil!.", "Success", JOptionPane.INFORMATION_MESSAGE);

                }
                loadCheckoutData();
            } catch(IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, "Insufficient balance for checkout ", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Checkout1ActionPerformed

    private void tambahBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahBalanceActionPerformed
        String balance = JOptionPane.showInputDialog("saldo yang ingin di tambahkan: ");
       
        try{
            UserAccess userAccess = new UserAccess(dbConnection.getConnection());
            CheckoutAccess checkoutAccess = new CheckoutAccess(dbConnection.getConnection());
            User loggedInUser = userAccess.getUser(loggedInUserId);
            
            double userBalance = loggedInUser.getBalance();
            userBalance += Double.parseDouble(balance);
            checkoutAccess.updateUserBalance(loggedInUserId,userBalance);
            loadCheckoutData();
        } catch(SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_tambahBalanceActionPerformed

    private void logOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutBtnActionPerformed
        SessionManager sessionManager = new SessionManager();
        sessionManager.logout();
        UI_Login ui_login = new UI_Login();
        ui_login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutBtnActionPerformed

    private void wKeranjangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wKeranjangActionPerformed
        int selectedRow = tableWishList.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin dihapus dari wishlist.");
            return;
        }
        DefaultTableModel produkModel = (DefaultTableModel) tableWishList.getModel();
    
        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        double harga = Double.parseDouble(produkModel.getValueAt(selectedRow, 3).toString());
    
        try {
            int userId = loggedInUserId; 
            KeranjangAccess keranjangAccess = new KeranjangAccess(dbConnection.getConnection());
        
            switch (kategori) {
                case "Buku":
                    keranjangAccess.addItem(userId, new Buku(0, namaProduk, harga, deskripsi));
                    break;
                case "Pakaian":
                    keranjangAccess.addItem(userId, new Pakaian(0, namaProduk, harga, deskripsi));
                    break;
                case "Elektronik":
                    keranjangAccess.addItem(userId, new Elektronik(0, namaProduk, harga, deskripsi));
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Kategori produk tidak valid: " + kategori);
                    return;
              
            }
            WishListAccess wishlistAccess = new WishListAccess(dbConnection.getConnection());

            int itemId = wishlistAccess.getItemId(loggedInUserId, kategori, namaProduk, deskripsi, harga);       
            wishlistAccess.removeItem(loggedInUserId, itemId);
            
            
            produkModel.removeRow(selectedRow);
        
            JOptionPane.showMessageDialog(this, "Produk berhasil ditambahkan ke keranjang.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error saat menambahkan produk ke keranjang: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_wKeranjangActionPerformed

    private void addToWishlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToWishlistButtonActionPerformed
        int selectedRow = tableProduk.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin ditambahkan ke Wishlist.");
            return;
        }

        DefaultTableModel produkModel = (DefaultTableModel) tableProduk.getModel();

        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        String hargaStr = produkModel.getValueAt(selectedRow, 3).toString();
    
        double harga;
        try {
            harga = Double.parseDouble(hargaStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Harga tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }   
        try {
            int userId = loggedInUserId; 
            WishListAccess wishListAccess = new WishListAccess(dbConnection.getConnection());
        
            switch (kategori) {
                case "Buku":
                    wishListAccess.addItem(userId, new Buku(0, namaProduk, harga, deskripsi));
                    break;
                case "Pakaian":
                    wishListAccess.addItem(userId, new Pakaian(0, namaProduk, harga, deskripsi));
                    break;
                case "Elektronik":
                    wishListAccess.addItem(userId, new Elektronik(0, namaProduk, harga, deskripsi));
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Kategori produk tidak valid: " + kategori);
                    return;
        }
        
            JOptionPane.showMessageDialog(this, "Produk berhasil ditambahkan ke wishlist.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error saat menambahkan produk ke wishlist: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addToWishlistButtonActionPerformed

    private void hapusWishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusWishActionPerformed
        int selectedRow = tableWishList.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin dihapus dari wishlist.");
            return;
        }
        DefaultTableModel produkModel = (DefaultTableModel) tableWishList.getModel();
    
        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        double harga = Double.parseDouble(produkModel.getValueAt(selectedRow, 3).toString());
    
        try {     
            WishListAccess wishlistAccess = new WishListAccess(dbConnection.getConnection());
            int itemId = wishlistAccess.getItemId(loggedInUserId, kategori, namaProduk, deskripsi, harga);       
            wishlistAccess.removeItem(loggedInUserId, itemId);
            
            produkModel.removeRow(selectedRow);
    
            JOptionPane.showMessageDialog(this, "Produk berhasil dihapus dari wishlist.");
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error saat menghapus produk dari wishlist: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hapusWishActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = tableProduk.getSelectedRow();

        DefaultTableModel produkModel = (DefaultTableModel) tableProduk.getModel();

        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        String hargaStr = produkModel.getValueAt(selectedRow, 3).toString();
    
        double harga;
        try {
            harga = Double.parseDouble(hargaStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Harga tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }   
        Product selectedProduct = null;
        switch (kategori) {
            case "Buku":
                selectedProduct = new Buku(selectedRow, namaProduk, harga, deskripsi);
                break;
            case "Pakaian":
                selectedProduct = new Pakaian(selectedRow, namaProduk, harga, deskripsi);
                break;
            case "Elektronik":
                selectedProduct = new Elektronik(selectedRow, namaProduk, harga, deskripsi);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Kategori tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
    }

    if (selectedProduct != null) {
        String details = selectedProduct.getDetails();
        JOptionPane.showMessageDialog(this, details, "Product Details", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void hapusbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusbtnActionPerformed

        int selectedRow = checkoutTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silakan pilih produk yang ingin dihapus dari checkout.");
            return;
        }
        DefaultTableModel produkModel = (DefaultTableModel) checkoutTable.getModel();
        
        String kategori = produkModel.getValueAt(selectedRow, 0).toString();
        String namaProduk = produkModel.getValueAt(selectedRow, 1).toString();
        String deskripsi = produkModel.getValueAt(selectedRow, 2).toString();
        double harga = Double.parseDouble(produkModel.getValueAt(selectedRow, 3).toString());
         
    
        try {     
            CheckoutAccess checkoutAccess = new CheckoutAccess(dbConnection.getConnection());
            int itemId = checkoutAccess.getItemId(loggedInUserId, kategori, namaProduk, deskripsi, harga);       
            checkoutAccess.removeItem(loggedInUserId, itemId);
            
            produkModel.removeRow(selectedRow);
    
            JOptionPane.showMessageDialog(this, "Produk berhasil dihapus dari checkout.");
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error saat menghapus produk dari checkout: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        loadCheckoutData();
    }//GEN-LAST:event_hapusbtnActionPerformed
    
    private void loadDataFromDatabase() {
        try {
            ProductAccess productAccess = new ProductAccess(dbConnection.getConnection());
            List<Product> productList = productAccess.getAllProducts();
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(new Object[]{"Kategori", "Nama Produk", "Deskripsi", "Harga"});
            for (Product product : productList) {
                model.addRow(new Object[]{product.getCategory(), product.getName(), product.getDescription(), product.getPrice()});
            }
            tableProduk.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } 
    }
   
   private void loadKeranjangData(){
        try {
            KeranjangAccess keranjangAccess = new KeranjangAccess(dbConnection.getConnection());
            List<Product> productList = keranjangAccess.getAllItems(loggedInUserId);
        
            DefaultTableModel model = (DefaultTableModel) tableKeranjang.getModel();
            model.setRowCount(0); 
        
            for (Product product : productList) {
                model.addRow(new Object[]{product.getCategory(), product.getName(), product.getDescription(), product.getPrice()});
            }
            
            Keranjang keranjang = new Keranjang(loggedInUserId);
            for (Product product : productList) {
                keranjang.addItem(product);
            }
        
            int totalItems = keranjang.getTotalItems();
            double totalPrice = keranjang.calculateTotalPrice();
        
            labelTotalBarang.setText(Integer.toString(totalItems));
            labelTotalHarga.setText(Double.toString(totalPrice));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
   
   
   private void loadCheckoutData(){
        try {
            CheckoutAccess checkoutAccess = new CheckoutAccess(dbConnection.getConnection());
            UserAccess userAccess = new UserAccess(dbConnection.getConnection());
    
            List<Product> checkoutItems = checkoutAccess.getCheckoutItems(loggedInUserId);
        
   
            DefaultTableModel model = (DefaultTableModel) checkoutTable.getModel();
            model.setRowCount(0);
            
       
            User loggedInUser = userAccess.getUser(loggedInUserId);
            Checkout checkout = new Checkout(loggedInUser, checkoutItems);
        
            for (Product item : checkoutItems) {
                model.addRow(new Object[]{item.getCategory(), item.getName(), item.getDescription(), item.getPrice()});
            }
        
            labelTotalBarangCheckout.setText(Integer.toString(checkout.calculateTotalItems()));
            labelTotalHargaCheckout.setText(Double.toString(checkout.calculateTotalPrice()));
            labelAccountBalance.setText(Double.toString(loggedInUser.getBalance()));
        
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading checkout data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
   }
   
   private void loadWishListData(){
       try {
            WishListAccess wishlistAccess = new WishListAccess(dbConnection.getConnection());
            List<Product> productList = wishlistAccess.getAllItems(loggedInUserId);
        
            DefaultTableModel model = (DefaultTableModel) tableWishList.getModel();
            model.setRowCount(0); 
        
            for (Product product : productList) {
                model.addRow(new Object[]{product.getCategory(), product.getName(), product.getDescription(), product.getPrice()});
            }
            
            WishList wishlist = new WishList(loggedInUserId);
            for (Product product : productList) {
                wishlist.addItem(product);
            }
       
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
   }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI_ListProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI_ListProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI_ListProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI_ListProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI_ListProduct(loggedInUserId).setVisible(true);    
           
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Checkout;
    private javax.swing.JButton Checkout1;
    private javax.swing.JButton addToWishlistButton;
    private javax.swing.JRadioButton buku;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTable checkoutTable;
    private javax.swing.JLabel desk;
    private javax.swing.JRadioButton elektronik;
    private javax.swing.JButton hapusButton;
    private javax.swing.JButton hapusWish;
    private javax.swing.JButton hapusbtn;
    private javax.swing.JTextArea inputDesk;
    private javax.swing.JTextField inputHarga;
    private javax.swing.JTextField inputNamaProduk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton jualBtn;
    private javax.swing.JButton keranjang;
    private java.awt.Label labelAccountBalance;
    private java.awt.Label labelTotalBarang;
    private java.awt.Label labelTotalBarangCheckout;
    private java.awt.Label labelTotalHarga;
    private java.awt.Label labelTotalHargaCheckout;
    private javax.swing.JButton logOutBtn;
    private javax.swing.JLabel output_totalHarga;
    private javax.swing.JRadioButton pakaian;
    private javax.swing.JTextField pencarian;
    private javax.swing.JTable tableKeranjang;
    private javax.swing.JTable tableProduk;
    private javax.swing.JTable tableWishList;
    private javax.swing.JButton tambahBalance;
    private javax.swing.JLabel todayMarket;
    private javax.swing.JLabel totalBarang;
    private javax.swing.JLabel totalHarga;
    private javax.swing.JButton wKeranjang;
    // End of variables declaration//GEN-END:variables

  
}

 

